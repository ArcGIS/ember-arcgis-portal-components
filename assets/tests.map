{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/torii.js","dummy/tests/integration/components/image-with-fallback/component-test.js","dummy/tests/integration/components/item-pager/component-test.js","dummy/tests/integration/components/item-picker/component-test.js","dummy/tests/integration/components/item-picker/feature-service-preview/component-test.js","dummy/tests/integration/components/item-picker/item-preview/component-test.js","dummy/tests/integration/components/item-picker/item-row/component-test.js","dummy/tests/integration/components/item-picker/layer-picker/component-test.js","dummy/tests/integration/components/loading-indicator/component-test.js","dummy/tests/integration/components/search-form/component-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/utils/force-https-test.js","dummy/tests/unit/utils/is-guid-test.js","dummy/tests/unit/utils/query-helpers-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/defaultcatalog/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/defaultcatalog/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/defaultcatalog/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/defaultcatalog/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/facets/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/facets/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/facets/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/facets/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/index/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/layerpicker/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/layerpicker/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/multiselect/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/multiselect/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/multiselect/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/multiselect/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/portalopts/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/portalopts/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/portalopts/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/portalopts/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/specificid/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/specificid/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/specificid/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/specificid/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/validation/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/validation/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('itempicker/validation/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'itempicker/validation/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('dummy/tests/helpers/start-app', ['exports', 'dummy/app', 'dummy/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/helpers/torii', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.stubValidSession = stubValidSession;\n  function stubValidSession(application, sessionData) {\n    var session = application.__container__.lookup('service:session');\n    var sm = session.get('stateMachine');\n    Ember.run(function () {\n      sm.send('startOpen');\n      sm.send('finishOpen', sessionData);\n    });\n  }\n});","define('dummy/tests/integration/components/image-with-fallback/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  // NOTE: this component is in ember-arcgis-layout-cards\n  (0, _emberQunit.moduleForComponent)('image-with-fallback', 'Integration | Component | image with fallback', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\" + EOL + EOL +\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"K7Frs3qt\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"image-with-fallback\\\",null,[[\\\"imgSrc\\\",\\\"fallbackSrc\\\"],[\\\"source\\\",\\\"fallback-source\\\"]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/item-pager/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-pager', 'Integration | Component | item pager', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n\n      var session = Ember.Service.extend({});\n      this.register('service:session', session);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this = this;\n\n    this.setProperties({\n      pageSize: 10,\n      totalCount: 101,\n      pageNumber: 1,\n      changePage: function changePage(page) {\n        _this.set('pageNumber', page);\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PqIWT/9Q\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-pager\\\",null,[[\\\"pageSize\\\",\\\"totalCount\\\",\\\"pageNumber\\\",\\\"changePage\\\"],[[20,[\\\"pageSize\\\"]],[20,[\\\"totalCount\\\"]],[20,[\\\"pageNumber\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"changePage\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    var pagination = this.$('ul.pagination');\n    assert.equal(pagination.find('li').length, 14);\n    assert.ok(pagination.find('li:first').hasClass('disabled'));\n    assert.ok(pagination.find('li:nth-child(2)').hasClass('disabled'));\n    assert.ok(pagination.find('li:nth-child(3)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(4)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(4)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(5)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(5)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(6)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(6)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(7)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(7)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(8)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(8)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(9)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(9)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(10)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(10)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(11)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(11)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(12)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(12)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(13)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(13)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(14)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(14)').hasClass('disabled'));\n\n    pagination.find('li:nth-child(4) a').click();\n    assert.equal(pagination.find('li').length, 14);\n    assert.ok(!pagination.find('li:first').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(2)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(3)').hasClass('active'));\n    assert.ok(pagination.find('li:nth-child(4)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(5)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(6)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(7)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(8)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(9)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(10)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(11)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(12)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(13)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(13)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(14)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(14)').hasClass('disabled'));\n\n    pagination.find('li:last a').click();\n    assert.ok(!pagination.find('li:first').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(2)').hasClass('disabled'));\n    assert.ok(!pagination.find('li:nth-child(3)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(4)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(5)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(6)').hasClass('active'));\n    assert.ok(!pagination.find('li:nth-child(7)').hasClass('active'));\n    assert.ok(pagination.find('li:nth-child(8)').hasClass('active'));\n    assert.ok(pagination.find('li:nth-child(9)').hasClass('disabled'));\n    assert.ok(pagination.find('li:nth-child(10)').hasClass('disabled'));\n  });\n});","define('dummy/tests/integration/components/item-picker/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-picker', 'Integration | Component | item picker', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n\n      var session = Ember.Service.extend({});\n      this.register('service:session', session);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"fHXPd39b\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"item-picker\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'Search items:');\n  });\n\n  (0, _emberQunit.test)('it renders results', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    var item = {\n      id: 'abc123',\n      title: 'This is the name',\n      description: 'This is the description',\n      owner: 'jupe',\n      modified: 1411060006000,\n      type: 'Web Map'\n    };\n    var items = Ember.A([item]);\n    this.set('items', { results: items });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+qq6bjQH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker\\\",null,[[\\\"items\\\"],[[20,[\\\"items\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('.item-picker-item-results-item').length, 1);\n    assert.ok(!this.$('.item-picker-item-results-item').hasClass('is-selected'));\n    assert.equal(this.$('.item-picker-current-item').length, 0);\n  });\n});","define('dummy/tests/integration/components/item-picker/feature-service-preview/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-picker/feature-service-preview', 'Integration | Component | item picker/feature service preview', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n\n      var session = Ember.Service.extend({});\n      this.register('service:session', session);\n    },\n    beforeEach: function beforeEach() {\n      var featureService = Ember.Service.extend({\n        getLayerInfo: function getLayerInfo() {\n          return Ember.RSVP.resolve(2);\n        }\n      });\n      this.register('service:feature-service', featureService);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var id = 'test-dataset-id';\n    var item = {\n      id: id,\n      title: 'This is the name',\n      description: 'This is the description',\n      owner: 'jupe',\n      modified: 1411060006000,\n      type: 'Feature Service',\n      url: 'https://foo.bar.baz'\n    };\n\n    this.setProperties({\n      currentItem: item,\n      isLoading: false,\n      layerList: [],\n      selectedLayer: null,\n      onSelectionValidator: function onSelectionValidator() {},\n      onPreviewSelected: function onPreviewSelected() {},\n      cancelAction: function cancelAction() {}\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ODCNaYog\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/feature-service-preview\\\",null,[[\\\"model\\\",\\\"onSelectionValidator\\\",\\\"onItemSelected\\\",\\\"onCancel\\\"],[[20,[\\\"currentItem\\\"]],[20,[\\\"onSelectionValidator\\\"]],[20,[\\\"onPreviewSelected\\\"]],[20,[\\\"cancelAction\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var el = this.$('.item-picker-current-item-preview');\n    assert.equal(el.find('h4').text().trim(), 'This is the name');\n    assert.equal(el.find('span').text().trim(), 'Shared by: jupe');\n    assert.equal(el.find('.item-picker-current-item-preview-description').text().trim(), 'This is the description');\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div').length, 3);\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div:nth-child(2)').text().trim(), '9/18/2014');\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div:nth-child(3)').text().trim(), 'Feature Service');\n  });\n});","define('dummy/tests/integration/components/item-picker/item-preview/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-picker/item-preview', 'Integration | Component | item picker/item preview', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var id = 'test-dataset-id';\n    var model = {\n      id: id,\n      title: 'This is the name',\n      description: 'This is the description',\n      owner: 'jupe',\n      modified: 1411060006000,\n      type: 'Web Map'\n    };\n\n    this.set('model', model);\n    this.set('onSelectionValidator', function () {});\n    this.set('onItemSelected', function () {});\n    this.set('cancelAction', function () {});\n    this.set('isLoading', true);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1rzVdQ/f\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-preview\\\",null,[[\\\"model\\\",\\\"onSelectionValidator\\\",\\\"onItemSelected\\\",\\\"onCancel\\\"],[[20,[\\\"model\\\"]],[20,[\\\"onSelectionValidator\\\"]],[20,[\\\"onItemSelected\\\"]],[20,[\\\"cancelAction\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    // assert.equal(this.$().text().trim(), '');\n    var el = this.$('.item-picker-current-item-preview');\n    assert.equal(el.find('h4').text().trim(), 'This is the name');\n    assert.equal(el.find('span').text().trim(), 'Shared by: jupe');\n    assert.equal(el.find('.item-picker-current-item-preview-description').text().trim(), 'This is the description');\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div').length, 2);\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div:nth-child(1)').text().trim(), '9/18/2014');\n    assert.equal(el.find('.item-picker-current-item-preview-meta > div:nth-child(2)').text().trim(), 'Web Map');\n  });\n});","define('dummy/tests/integration/components/item-picker/item-row/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-picker/item-row', 'Integration | Component | item picker/item row', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n\n      var session = Ember.Service.extend({});\n      this.register('service:session', session);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // test double for the external action\n    this.set('onClick', function () {\n      // assert.equal(actual, expected, 'submitted value is passed to external action');\n    });\n\n    var id = 'test-item-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      currentItemId: id + '-wrong',\n      model: model\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wzeFveZJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]],[20,[\\\"item\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'This is the name');\n    assert.ok(!this.$('.item-picker-item-results-item').hasClass('is-selected'));\n  });\n\n  (0, _emberQunit.test)('it renders selected', function (assert) {\n    // test double for the external action\n    this.set('onClick', function () {\n      // assert.equal(actual, expected, 'submitted value is passed to external action');\n    });\n\n    var id = 'test-item-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      currentItemId: id,\n      model: model\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wzeFveZJ\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]],[20,[\\\"item\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'This is the name');\n    assert.ok(this.$('.item-picker-item-results-item').hasClass('is-selected'));\n  });\n\n  (0, _emberQunit.test)('it properly handles click', function (assert) {\n    var id = 'test-dataset-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      currentItemId: id,\n      model: model\n    });\n\n    // test double for the external action\n    this.set('onClick', function (item) {\n      assert.equal(item.id, id, 'submitted value is passed to external action');\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+w3pYHwt\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('li > a').click();\n  });\n\n  (0, _emberQunit.test)('multiple-mode: it renders', function (assert) {\n    // test double for the external action\n    this.set('onClick', function () {\n      // assert.equal(actual, expected, 'submitted value is passed to external action');\n    });\n\n    var id = 'test-item-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      model: model,\n      itemsToAdd: []\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yLB+N6sB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"selectMultiple\\\",\\\"itemsToAdd\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],true,[20,[\\\"itemsToAdd\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]],[20,[\\\"item\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'This is the name');\n    assert.equal(this.$('.item-picker-item-results-item span').length, 1);\n    assert.equal(this.$('.item-picker-item-results-item a').length, 1);\n    assert.equal(this.$('.item-picker-item-results-item a input').length, 1);\n    assert.notOk(this.$('.item-picker-item-results-item a input').is(':checked'));\n  });\n\n  (0, _emberQunit.test)('multiple-mode: it renders checked', function (assert) {\n    // test double for the external action\n    this.set('onClick', function () {\n      // assert.equal(actual, expected, 'submitted value is passed to external action');\n    });\n\n    var id = 'test-item-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      model: model,\n      itemsToAdd: [{ id: id }]\n    });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"yLB+N6sB\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"selectMultiple\\\",\\\"itemsToAdd\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],true,[20,[\\\"itemsToAdd\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]],[20,[\\\"item\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'This is the name');\n    assert.ok(this.$('.item-picker-item-results-item a input').is(':checked'));\n  });\n\n  (0, _emberQunit.test)('multiple-mode: it properly handles click', function (assert) {\n    var id = 'test-dataset-id';\n    var model = { id: id, title: 'This is the name' };\n    this.setProperties({\n      model: model,\n      itemsToAdd: []\n    });\n\n    // test double for the external action\n    this.set('onClick', function (item) {\n      assert.equal(item.id, id, 'submitted value is passed to external action');\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"LujJIB75\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/item-row\\\",null,[[\\\"model\\\",\\\"selectMultiple\\\",\\\"itemsToAdd\\\",\\\"currentItemId\\\",\\\"onClick\\\"],[[20,[\\\"model\\\"]],true,[20,[\\\"itemsToAdd\\\"]],[20,[\\\"currentItemId\\\"]],[25,\\\"action\\\",[[19,0,[]],[20,[\\\"onClick\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.notOk(this.$('.item-picker-item-results-item a input').is(':checked'));\n\n    this.$('li > a').click();\n  });\n});","define('dummy/tests/integration/components/item-picker/layer-picker/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('item-picker/layer-picker', 'Integration | Component | item picker/layer picker', {\n    integration: true,\n    setup: function setup() {\n      // manually invoke the ember-intl initializer\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n      this.inject.service('intl', { as: 'intl' });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders with layers', function (assert) {\n    var item = {\n      checked: true,\n      defaultVisibility: true,\n      geometryType: 'esriGeometryPoint',\n      id: 0,\n      maxScale: 0,\n      minScale: 0,\n      name: 'test',\n      parentLayerId: -1,\n      subLayerIds: null\n    };\n\n    var itemArr = [item];\n    this.set('model', itemArr);\n    this.set('onLayerSelected', function () {});\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CFx/qEuD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"item-picker/layer-picker\\\",null,[[\\\"model\\\",\\\"selectable\\\",\\\"onLayerSelected\\\"],[[20,[\\\"model\\\"]],true,[20,[\\\"onLayerSelected\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.layer-picker-list').length, 1, 'Layer list is not empty');\n    assert.equal(this.$('ul').length, 1, 'There is at least 1 layer in the list');\n  });\n});","define('dummy/tests/integration/components/loading-indicator/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('loading-indicator', 'Integration | Component | loading indicator', {\n    integration: true,\n    setup: function setup() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(1);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"dgBO95yD\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"loading-indicator\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$().text().trim(), 'Loading...');\n  });\n});","define('dummy/tests/integration/components/search-form/component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('search-form', 'Integration | Component | search form', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      var intl = this.container.lookup('service:intl');\n      intl.setLocale('en-us');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    this.set('q', undefined);\n    this.on('search', function (val) {\n      assert.equal(val, 'test', 'it should have passed the value on submit');\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3vPbR+10\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"search-form\\\",null,[[\\\"_q\\\",\\\"onSearch\\\"],[[20,[\\\"q\\\"]],[25,\\\"action\\\",[[19,0,[]],\\\"search\\\"],null]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $input = this.$('input');\n    assert.equal($input.val(), '', 'input should be empty');\n\n    // enter term and search\n    $input.val('test').trigger('change');\n    assert.equal(this.get('q'), undefined, 'should not mutate q property');\n  });\n});","define('dummy/tests/test-helper', ['dummy/app', 'dummy/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/image-with-fallback/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/image-with-fallback/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-pager/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-pager/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-picker/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-picker/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-picker/feature-service-preview/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-picker/feature-service-preview/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-picker/item-preview/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-picker/item-preview/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-picker/item-row/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-picker/item-row/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/item-picker/layer-picker/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/item-picker/layer-picker/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/loading-indicator/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/loading-indicator/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/search-form/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-form/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/force-https-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/force-https-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/is-guid-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/is-guid-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/utils/query-helpers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/query-helpers-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/utils/force-https-test', ['ember-arcgis-portal-components/utils/force-https', 'qunit'], function (_forceHttps, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | force https');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it upgrades http to https for arcgis.com if protocol is https', function (assert) {\n    var result = (0, _forceHttps.default)('http://foo.arcgis.com/some-path?query=string', 'https');\n    assert.equal(result, 'https://foo.arcgis.com/some-path?query=string');\n  });\n\n  (0, _qunit.test)('it always upgrades for arcgis.com urls to https', function (assert) {\n    var result = (0, _forceHttps.default)('http://foo.arcgis.com/some-path?query=string', 'http');\n    assert.equal(result, 'https://foo.arcgis.com/some-path?query=string');\n  });\n\n  (0, _qunit.test)('it does upgrade non-arcgis.com urls to https if protocol is https', function (assert) {\n    var result = (0, _forceHttps.default)('http://foo.com', 'https');\n    assert.equal(result, 'https://foo.com');\n  });\n\n  (0, _qunit.test)('it returns https', function (assert) {\n    var result = (0, _forceHttps.default)('https://foo.com');\n    assert.equal(result, 'https://foo.com');\n  });\n});","define('dummy/tests/unit/utils/is-guid-test', ['dummy/utils/is-guid', 'qunit'], function (_isGuid, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | is guid');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    assert.notOk((0, _isGuid.default)(1234));\n    assert.notOk((0, _isGuid.default)('1234'));\n    assert.notOk((0, _isGuid.default)('imnotaguid'));\n    assert.ok((0, _isGuid.default)('76c3db4812d44f0087850093837e7a90'));\n    assert.ok((0, _isGuid.default)('{371acc8b-85cf-4251-8c01-7d0e48bac7e3}'));\n  });\n});","define('dummy/tests/unit/utils/query-helpers-test', ['dummy/utils/query-helpers', 'qunit'], function (_queryHelpers, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Utility | query helpers');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var facet = {\n      name: 'Apps',\n      params: {\n        query: {\n          type: ['Web Mapping Application'],\n          typekeywords: ['-hubsite', '-story'],\n          tags: ['-survey', '-storymap', '-site']\n        }\n      }\n    };\n    var query = 'Environment';\n    var result = _queryHelpers.default.createQuery(facet, query);\n    assert.ok(result);\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingslBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;","file":"tests.js"}